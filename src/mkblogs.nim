import std/[algorithm, os, strutils, sugar, tables, times]
import pkg/[jsony, mummy, mummy/routers, markdown, regex]
import ./[argparser]

type
  Index* = object
    flap*: string
    contacts*: Table[string, string]

  OpenGraphData* = object
    title*: string
    description*: string
    url*: string

  Meta* = object
    title*: string
    port*: uint16 = 8080
    index*: Index
    opengraph*: OpenGraphData

  Article* = object
    path*: string
    creationDate*: Time
    title*: string

const
  TagsExpr = re2("<[^>]+>")
  TimeFormatVerbose = "HH:mm yyyy-MM-dd"
  TimeFormatDisplay = "MMMM d, yyyy"

func removeHtmlTags(str: string): string =
  replace(str, TagsExpr, "")

func getOpengraphTags(
    title: string, description: string, url: string, kind: string = "website"
): string =
  """
<meta property="og:title" content="$1">
<meta property="og:description" content="$2">
<meta property="og:url" content="$3">
<meta property="og:type" content="$4">
  """ %
    [title, description, url, kind]

proc attachRouterPaths(router: var Router, dir: string, meta: Meta): seq[Article] =
  # Add a route for the favicon
  let favicon = readFile(dir / "favicon.png")
  router.get(
    "/favicon.png",
    proc(request: Request) {.gcsafe.} =
      var headers: HttpHeaders
      headers["Content-Type"] = "image/png"
      request.respond(200, headers = ensureMove(headers), body = favicon),
  )

  var articles: seq[Article]
  for path in walkDirRec(dir / "entries"):
    var pRouter = router.addr
    capture path:
      let
        creationTimeObj = getCreationTime(path)
        creationTime = creationTimeObj.format(TimeFormatVerbose)
        modifiedTime = getLastModificationTime(path).format(TimeFormatVerbose)

      let rendered = markdown(readFile(path))
      let renderSplitted = rendered.splitLines()
      let title =
        if renderSplitted.len > 0:
          renderSplitted[0].removeHtmlTags()
        else:
          "Untitled Entry"

      let description =
        if renderSplitted.len > 1:
          renderSplitted[1].removeHtmlTags()
        else:
          "No description can be rendered"

      let
        splittedPath = path.split('/')
        path = '/' & splittedPath[1 ..< splittedPath.len].join("/").changeFileExt("")

      let buffer =
        """
  <!DOCTYPE html>
  <html>
    <!--Document generated by mkblogs (https://github.com/xTrayambak/mkblogs)-->
    <head>
      <title>$1 - $2</title>
      <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
      <link rel="icon" type="image/png" href="../favicon.png">
      $3

      <style>
      h1, h2, h3, h4, h5, h6,
      footer
      {
        text-align: center;
      }

      body
      {
        background-color: #282828;
      }

      img
      {
        display: block;
        margin-left: auto;
        margin-right: auto;
      }

      h1, h2, h3, h4, h5, h6, p, footer, li
      {
        color: #fff;
      }

      * { font-family: 'Roboto', sans-serif; }

      a
      {
        color: lightgray;
        text-decoration: none;
      }

      a:hover { color: white; }

      code {
      }

      body pre {
        text-align: left;
        border-radius: 8px;
        padding: 4px 8px;
        margin: 0 auto;
        width: fit-content;
        text-align: center;
      }
      </style>
    </head>
    <body>
      <section>
        $4
      </section>
      <footer>Created on <strong>$5</strong></footer>
      <!--<script type="module">
        // Code highlighting stuff
        import { createHighlighter } from "https://esm.sh/shiki@3.0.0?cache=1"
 
        async function highlight()
        {
          const toHighlight = document.querySelectorAll("code");
          const highlighter = await createHighlighter(
            {themes: ['nord'], langs: ["nim", "javascript", "c", "cpp", "rust", "json", "proto", "asm", "lua", "markdown", "makefile", "zsh"]}
          );
          // await highlighter.loadTheme('gruvbox-dark-hard');
          
          for (const elem of toHighlight)
          {
            const classes = Array.from(elem.classList);
            var language = '';

            for (const clazz of classes)
            {
              if (!clazz.startsWith("language-"))
                continue;

              language = clazz.split("language-")[1];
            }
            
            if (language.length > 0)
              elem.innerHTML = await highlighter.codeToHtml(elem.textContent, {
                lang: language,
                theme: 'nord'
              })
          }
        }

        await highlight();
      </script>-->
    </body>
  </html>
      """ %
        [
          title,
          meta.title,
          getOpengraphTags(
            title, description, meta.opengraph.url & '/' & path, "article"
          ),
          rendered,
          creationTime,
        ]

      proc viewer(request: Request) {.gcsafe.} =
        var headers: HttpHeaders
        headers["Content-Type"] = "text/html; charset=UTF-8"
        headers["Server"] = "mkblogs via mummy backend"
        request.respond(200, headers = ensureMove(headers), body = buffer)

      capture path:
        let
          splittedPath = path.split('/')
          path = '/' & splittedPath[1 ..< splittedPath.len].join("/").changeFileExt("")
        articles &= Article(title: title, path: path, creationDate: creationTimeObj)
        pRouter[].get(path, viewer)

  move(articles)

proc attachIndex(router: var Router, meta: Meta, articles: seq[Article]) =
  var renderedEntries = newStringOfCap(4096)
  var renderedContacts = newStringOfCap(1024)
  for article in articles.sortedByIt(it.creationDate).reversed():
    renderedEntries &=
      """
      <div class="entry">
        <a href="$1">
          <h3>$2</h3>
          <h6 style="margin-top: auto;"><strong>$3</strong></h6>
        </a>
      </div>
      <br>
    """ %
      [article.path, article.title, article.creationDate.format(TimeFormatDisplay)]

  for contactMeth, contactInfo in meta.index.contacts:
    renderedContacts &=
      """
        <br>
        <h4><strong>$1</strong> â€” $2</h4>
      """ %
      [contactMeth, contactInfo]

  let buffer =
    """
<!DOCTYPE html>
<html>
  <!--Index page generated by mkblogs (https://github.com/xTrayambak/mkblogs)-->
  <head>
    <title>$1</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="icon" type="image/png" href="favicon.png">
    $2
    <style>
      *
      {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        font-family: 'Roboto', sans-serif;
      }

      body, html
      {
        margin: 0;
        padding: 0;
        height: 100%;
        background-color: #282828;
      }

      .main
      {
        display: flex;
        height: 100vh;
      }

      .entries
      {
        flex: 0 0 80%;
        padding: 20px;
        overflow-y: auto;
        background-color: #3c3836;
      }

      .flap
      {
        flex: 0 0 20%;
        height: 100vh;
        overflow-y: auto;
        overflow-x: hidden;
        padding: 20px;
        background-color: #32302f;
        color: #fff;
        box-sizing: border-box;
        overflow-y: auto;
      }

      .entry
      {
        margin-bottom: 15px;
        padding: 10px;
        background-color: #32302f;
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        border-radius: 8px;
        color: #fff;
        /* height: 200px; */
      }

      a
      {
        color: lightgray;
        text-decoration: none;
      }

      a:hover { color: white; }
    </style>
  </head>
  <body>
    <div class="main">
      <div class="entries">
        $3
      </div>
      <div class="flap">
        <h2>$1</h2>
        <br>
        <p>$4</p>
        <br><br>
        <h3><strong>Contact Me</strong></h3>
        $5
      </div>
    </div>
  </body>
</html>
    """ %
    [
      meta.title,
      getOpengraphTags(
        meta.opengraph.title, meta.opengraph.description, meta.opengraph.url
      ),
      ensureMove(renderedEntries),
      meta.index.flap,
      ensureMove(renderedContacts),
    ]

  proc viewer(request: Request) {.gcsafe.} =
    var headers: HttpHeaders
    headers["Content-Type"] = "text/html; charset=UTF-8"
    headers["Server"] = "mkblogs via mummy backend"

    request.respond(200, headers = ensureMove(headers), body = buffer)

  router.get("/", viewer)

proc serveProject(dir: string) =
  let meta = readFile(dir / "meta.json").fromJson(Meta)
  var router: Router
  let articles = attachRouterPaths(router, dir, meta)
  attachIndex(router, meta, articles)

  var server = newServer(ensureMove(router))

  echo "* mkblogs is now running on port " & $meta.port
  server.serve(Port(meta.port), "0.0.0.0")

proc main() {.inline.} =
  var input = parseInput()
  case input.command
  of "serve":
    let dir = input.arguments[0]
    serveProject(dir)
  else:
    quit "Invalid mode: " & input.command

when isMainModule:
  main()
